{"ts":1345462164395,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var request = require(\"request\")\nvar oauth   = require(\"./lib/oauth\")\nvar qs      = require(\"querystring\")\n\n\nvar set_args = function (options, args) {\n  for(var attr in args) {\n    if (args.hasOwnProperty(attr)){\n      options[attr] = args[attr];\n    }\n  }\n  return options;\n};\n\nexports.app = function(config){\n\n  var sign = oauth(config.app_key, config.app_secret)\n  var root = config.root || \"sandbox\"\n \n  return {\n\n    requesttoken: function(cb){\n      var signature = sign({})\n      var args = {\n        \"method\": \"POST\",\n        \"headers\": { \"content-type\": \"application/x-www-form-urlencoded\" },\n        \"url\": \"https://api.dropbox.com/1/oauth/request_token\",\n        \"body\": qs.stringify(signature)\n      }\n      return request(args, function(e, r, b){\n        var obj = qs.parse(b)\n        obj.authorize_url = \"https://www.dropbox.com/1/oauth/authorize?oauth_token=\" + obj.oauth_token\n        cb(e ? null : r.statusCode, obj)\n      })\n    },\n\n    accesstoken: function(options, cb){\n      var params = sign(options)\n      var args = {\n        \"method\": \"POST\",\n        \"headers\": { \"content-type\": \"application/x-www-form-urlencoded\" },\n        \"url\": \"https://api.dropbox.com/1/oauth/access_token\",\n        \"body\": qs.stringify(params)\n      }\n      return request(args, function(e, r, b){\n        cb(e ? null : r.statusCode, qs.parse(b))\n      })\n    },\n\n    // creates client object\n    client: function(options){\n      var options = options\n\n      return {\n        account: function(cb){\n          var params = sign(options)\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": { \"content-type\": \"application/x-www-form-urlencoded\" },\n            \"url\": \"https://api.dropbox.com/1/account/info\",\n            \"body\": qs.stringify(params)\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n        \n        delta: function(args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": { \"content-type\": \"application/x-www-form-urlencoded\" },\n            \"url\": \"https://api.dropbox.com/1/delta\",\n            \"body\": qs.stringify(params)\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        get: function(path, args, cb){\n          var params = sign(options)\n          \n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n\n          var args = {\n            \"method\": \"GET\",\n            \"url\": \"https://api-content.dropbox.com/1/files/\" + (params.root || root) + \"/\" + qs.escape(path) + \"?\" + qs.stringify(params),\n            \"encoding\": null\n          }\n          return request(args, function(e, r, b){\n            cb(r.statusCode, b, r.headers['x-dropbox-metadata'])\n          })\n        },\n\n        stream: function(path, args) {\n          var params = sign(options);\n          \n          for(var attr in args)(function(attr){\n            options[attr] = args[attr]\n          })(attr)\n\n          var args = {\n            \"method\": \"GET\",\n            \"url\": \"https://api-content.dropbox.com/1/files/\" + (params.root || root) + \"/\" + qs.escape(path) + \"?\" + qs.stringify(params),\n            \"encoding\": null\n          }\n\n          return request(args);\n\n        },\n\n        put: function(path, body, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n\n          var args = {\n            \"method\": \"PUT\",\n            \"headers\": { \"content-length\": body.length },\n            \"url\": \"https://api-content.dropbox.com/1/files_put/\" + (params.root || root) + \"/\" + qs.escape(path) + \"?\" + qs.stringify(params),\n            \"body\": body \n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        metadata: function(path, args, cb){\n          var params = sign(options);\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n          var args = {\n            \"method\": \"GET\",\n            \"url\": \"https://api.dropbox.com/1/metadata/\" + (params.root || root) + \"/\" + qs.escape(path) + \"?\" + qs.stringify(params)\n          }\n          return request(args, function(e, r, b){\n            // this is a special case, since the dropbox api returns a\n            // 304 response with an empty body when the 'hash' option\n            // is provided and there have been no changes since the\n            // hash was computed\n            cb(e ? null : r.statusCode, r.statusCode == 304 ? {} : JSON.parse(b))\n          })\n        },\n\n        //\n        // Recursively loads a dropbox folder\n        //\n        readdir: function (path, callback) {\n          var results = [],\n          REQUEST_CONCURRENCY_DELAY = 200,\n          callbacks = 0,\n          self = this;\n          //\n          // Remark: REQUEST_CONCURRENCY_DELAY represents the millisecond,\n          // delay between outgoing requests to dropbox\n          //\n          function load (path) {\n            callbacks++;\n            //\n            // Give the dropbox API a delay between requests,\n            // by wrapping each depth level in a setTimeout delay\n            //\n            setTimeout(function(){\n              self.client.metadata(path, function (status, reply) {\n                //\n                // If we have found any contents on this level of the folder\n                //\n                if (reply.contents) {\n                  reply.contents.forEach(function (item) {\n                    //\n                    // Add the item into our results array\n                    //\n                    results.push(item.path);\n                    //\n                    // If we have encountered another folder, we are going to recurse on it\n                    //\n                    if (item.is_dir) {\n                      load(item.path);\n                    }\n                  });\n                }\n                callbacks--;\n                if (callbacks === 0) {\n                  callback(status, results);\n                }\n              });\n            }, REQUEST_CONCURRENCY_DELAY)\n          }\n          console.log('warn: recursively loading data from dropbox...this may take some time');\n          load(path, results);\n        },\n\n        revisions: function(path, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n\n          var args = {\n            \"method\": \"GET\",\n            \"url\": \"https://api.dropbox.com/1/revisions/\" + (params.root || root) + \"/\" + qs.escape(path) + \"?\" + qs.stringify(params)\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        restore: function(path, rev, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n\n          params[\"rev\"] = rev\n\n          var body = qs.stringify(params)\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": {\n              \"content-type\": \"application/x-www-form-urlencoded\",\n              \"content-length\": body.length\n            },\n            \"url\": \"https://api.dropbox.com/1/restore/\" + (params.root || root) + \"/\" + qs.escape(path), // + \"?\" + qs.stringify(params)\n            \"body\": qs.stringify(params)\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        search: function(path, query, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n\n          params[\"query\"] = query\n\n          var body = qs.stringify(params)\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": {\n              \"content-type\": \"application/x-www-form-urlencoded\",\n              \"content-length\": body.length \n            },\n            \"url\": \"https://api.dropbox.com/1/search/\" + (params.root || root) + \"/\" + qs.escape(path),\n            \"body\": body\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        shares: function(path, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n          var body = qs.stringify(params)\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": {\n              \"content-type\": \"application/x-www-form-urlencoded\",\n              \"content-length\": body.length \n            },\n            \"url\": \"https://api.dropbox.com/1/shares/\" + (params.root || root) + \"/\" + qs.escape(path), \n            \"body\": body\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        media: function(path, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n          var body = qs.stringify(params)\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": {\n              \"content-type\": \"application/x-www-form-urlencoded\",\n              \"content-length\": body.length \n            },\n            \"url\": \"https://api.dropbox.com/1/media/\" + (params.root || root) + \"/\" + qs.escape(path), \n            \"body\": body\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        cpref: function(path, args, cb){\n          var params = sign(options);\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n          var args = {\n            \"method\": \"GET\",\n            \"url\": \"https://api.dropbox.com/1/copy_ref/\" + (params.root || root) + \"/\" + qs.escape(path) + \"?\" + qs.stringify(params)\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        thumbnails: function(path, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n\n          var args = {\n            \"method\": \"GET\",\n            \"url\": \"https://api-content.dropbox.com/1/thumbnails/\" + (params.root || root) + \"/\" + qs.escape(path) + \"?\" + qs.stringify(params),\n            \"encoding\": null\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, b, r.headers['x-dropbox-metadata'])\n          })\n        },\n\n        cp: function(from_path, to_path, args, cb){\n          var params = sign(options)\n          \n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n          \n          // check for copy ref\n          if(from_path.hasOwnProperty(\"copy_ref\")){\n            params['from_copy_ref'] = from_path[\"copy_ref\"]\n          }else{\n            params['from_path'] = from_path\n          }\n          \n          params[\"root\"] = params.root || root\n          params[\"to_path\"] = to_path\n          \n          // var from_param_key = \"from_path\";\n          // var params = sign(options)\n          // if(cb == null){\n          //   cb = args\n          // }else{\n          //   set_args(params, args);\n          //   if (params.hasOwnProperty('from_copy_ref')) {\n          //     delete params['from_copy_ref'];\n          //     from_param_key = 'from_copy_ref';\n          //            }\n          // }\n\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": { \"content-type\": \"application/x-www-form-urlencoded\" },\n            \"url\": \"https://api.dropbox.com/1/fileops/copy\",\n            \"body\": qs.stringify(params)\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        mv: function(from_path, to_path, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n          params[\"root\"] = params.root || root\n          params[\"from_path\"] = from_path\n          params[\"to_path\"] = to_path\n\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": { \"content-type\": \"application/x-www-form-urlencoded\" },\n            \"url\": \"https://api.dropbox.com/1/fileops/move\",\n            \"body\": qs.stringify(params)\n          }\n\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        rm: function(path, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n          params[\"root\"] = params[\"root\"] || root\n          params[\"path\"] = path\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": { \"content-type\": \"application/x-www-form-urlencoded\" },\n            \"url\": \"https://api.dropbox.com/1/fileops/delete\",\n            \"body\": qs.stringify(params)\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        },\n\n        mkdir: function(path, args, cb){\n          var params = sign(options)\n          if(cb == null){\n            cb = args\n          }else{\n            set_args(params, args);\n          }\n          params[\"root\"] = params.root || root\n          params[\"path\"] = path\n          var args = {\n            \"method\": \"POST\",\n            \"headers\": { \"content-type\": \"application/x-www-form-urlencoded\" },\n            \"url\": \"https://api.dropbox.com/1/fileops/create_folder\",\n            \"body\": qs.stringify(params)\n          }\n          return request(args, function(e, r, b){\n            cb(e ? null : r.statusCode, JSON.parse(b))\n          })\n        }\n      }\n    }\n  } \n\n}\n\n"]],"start1":0,"start2":0,"length1":0,"length2":14587}]],"length":14587}
{"contributors":[],"silentsave":true,"ts":1345462855480,"patch":[[{"diffs":[[0,"r.statusCode, b,"],[1," JSON.parse("],[0," r.headers['x-dr"]],"start1":2976,"start2":2976,"length1":32,"length2":44},{"diffs":[[0,"opbox-metadata']"],[1," ) "],[0,")\n          })\n "]],"start1":3020,"start2":3020,"length1":32,"length2":35},{"diffs":[[0,"elf."],[-1,"client."],[0,"meta"]],"start1":5605,"start2":5605,"length1":15,"length2":8}]],"length":14595,"saved":false}
